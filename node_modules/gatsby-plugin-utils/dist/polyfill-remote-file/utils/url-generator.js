"use strict";

exports.__esModule = true;
exports.generateFileUrl = generateFileUrl;
exports.generateImageUrl = generateImageUrl;
exports.ImageCDNUrlKeys = void 0;

var _path = require("path");

var _url = require("url");

var _createContentDigest = require("gatsby-core-utils/create-content-digest");

var _types = require("../types");

// this is an arbitrary origin that we use #branding so we can construct a full url for the URL constructor
const ORIGIN = `https://gatsbyjs.com`;
let ImageCDNUrlKeys;
exports.ImageCDNUrlKeys = ImageCDNUrlKeys;

(function (ImageCDNUrlKeys) {
  ImageCDNUrlKeys["URL"] = "u";
  ImageCDNUrlKeys["ARGS"] = "a";
})(ImageCDNUrlKeys || (exports.ImageCDNUrlKeys = ImageCDNUrlKeys = {}));

function generateFileUrl({
  url,
  filename
}) {
  const fileExt = (0, _path.extname)(filename);
  const filenameWithoutExt = (0, _path.basename)(filename, fileExt);
  const parsedURL = new _url.URL(`${ORIGIN}${generatePublicUrl({
    url
  })}/${filenameWithoutExt}${fileExt}`);
  parsedURL.searchParams.append(ImageCDNUrlKeys.URL, url);
  return `${parsedURL.pathname}${parsedURL.search}`;
}

function generateImageUrl(source, imageArgs) {
  const filenameWithoutExt = (0, _path.basename)(source.filename, (0, _path.extname)(source.filename));
  const parsedURL = new _url.URL(`${ORIGIN}${generatePublicUrl(source)}/${(0, _createContentDigest.createContentDigest)(generateImageArgs(imageArgs))}/${filenameWithoutExt}.${imageArgs.format}`);
  parsedURL.searchParams.append(ImageCDNUrlKeys.URL, source.url);
  parsedURL.searchParams.append(ImageCDNUrlKeys.ARGS, generateImageArgs(imageArgs));
  return `${parsedURL.pathname}${parsedURL.search}`;
}

function generatePublicUrl({
  url,
  mimeType
}) {
  const remoteUrl = (0, _createContentDigest.createContentDigest)(url);
  let publicUrl = mimeType && (0, _types.isImage)({
    mimeType
  }) ? `/_gatsby/image/` : `/_gatsby/file/`;
  publicUrl += `${remoteUrl}`;
  return publicUrl;
}

function generateImageArgs({
  width,
  height,
  format,
  cropFocus,
  quality
}) {
  const args = [];

  if (width) {
    args.push(`w=${width}`);
  }

  if (height) {
    args.push(`h=${height}`);
  }

  if (cropFocus) {
    args.push(`fit=crop`);
    args.push(`crop=${Array.isArray(cropFocus) ? cropFocus.join(`,`) : cropFocus}`);
  }

  args.push(`fm=${format}`);
  args.push(`q=${quality}`);
  return args.join(`&`);
}