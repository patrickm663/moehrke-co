"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _IndicatorButton = _interopRequireDefault(require("./IndicatorButton"));

var _utils = require("../../utils");

var _icons = require("../icons");

var _enums = require("../../models/enums");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getBaseButtonProps = ({
  buttonIndex,
  buildStatus
}) => {
  const baseProps = {
    buttonIndex,
    testId: `link`,
    hoverable: true,
    iconSvg: _icons.linkIcon
  };
  const activeProps = {
    active: true,
    tooltip: {
      testId: baseProps.testId,
      content: `Copy link`,
      hoverable: true
    }
  };
  const buildStatusProps = {
    [_enums.BuildStatus.UPTODATE]: activeProps,
    [_enums.BuildStatus.BUILDING]: activeProps,
    [_enums.BuildStatus.SUCCESS]: null,
    [_enums.BuildStatus.ERROR]: null
  };
  const props = buildStatus ? buildStatusProps[buildStatus] : null;

  if (props) {
    return { ...baseProps,
      ...props
    };
  }

  return baseProps;
};

const copySuccessTooltip = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _icons.successIcon, `Link copied`);

const LinkIndicatorButton = props => {
  const {
    orgId,
    siteId,
    buildId,
    buttonIndex
  } = props;
  const [buttonProps, setButtonProps] = (0, _react.useState)({
    buttonIndex,
    testId: `link`,
    hoverable: true,
    iconSvg: _icons.linkIcon
  });
  const {
    track
  } = (0, _utils.useTrackEvent)();

  const copyLinkClick = () => {
    track({
      eventType: `PREVIEW_INDICATOR_CLICK`,
      orgId,
      siteId,
      buildId,
      name: `copy link`
    });
    setButtonProps(btnProps => {
      return { ...btnProps,
        tooltip: { ...buttonProps.tooltip,
          content: copySuccessTooltip,
          overrideShow: true,
          hoverable: false
        },
        hoverable: false
      };
    });
    setTimeout(() => {
      setButtonProps(btnProps => {
        return { ...btnProps,
          tooltip: { ...btnProps.tooltip,
            overrideShow: false,
            show: false,
            hoverable: true
          },
          hoverable: true
        };
      }); // We want the tooltip to linger for two seconds to let the user know it has been copied
    }, 2000);

    if (window) {
      navigator.clipboard.writeText(window.location.href);
    }
  };

  const trackHover = () => {
    track({
      eventType: `PREVIEW_INDICATOR_HOVER`,
      orgId,
      siteId,
      buildId,
      name: `link hover`
    });
  };

  (0, _react.useEffect)(() => {
    const baseButtonProps = getBaseButtonProps(props);

    const onDisappear = () => {
      setButtonProps(btnProps => {
        return { ...btnProps,
          tooltip: { ...buttonProps.tooltip,
            content: `Copy link`,
            hoverable: true
          }
        };
      });
    };

    setButtonProps(btnProps => {
      return { ...btnProps,
        ...baseButtonProps,
        onClick: copyLinkClick,
        tooltip: { ...baseButtonProps.tooltip,
          onDisappear
        }
      };
    });
  }, [props.buildStatus]);
  return /*#__PURE__*/_react.default.createElement(_IndicatorButton.default, (0, _extends2.default)({
    onMouseEnter: buttonProps.active ? trackHover : undefined
  }, buttonProps));
};

var _default = LinkIndicatorButton;
exports.default = _default;