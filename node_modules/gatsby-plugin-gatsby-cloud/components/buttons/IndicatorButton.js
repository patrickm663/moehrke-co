"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _tooltips = require("../tooltips");

var _icons = require("../icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const IndicatorButton = ({
  buttonIndex,
  tooltip,
  iconSvg,
  onClick,
  showSpinner,
  active = false,
  testId,
  onMouseEnter,
  hoverable,
  highlighted,
  onTooltipToogle
}) => {
  const [showTooltip, setShowTooltip] = (0, _react.useState)(tooltip === null || tooltip === void 0 ? void 0 : tooltip.show);
  const isFirstButton = buttonIndex === 0;
  const marginTop = isFirstButton ? `0px` : `8px`;

  const onButtonMouseEnter = () => {
    if (active && tooltip !== null && tooltip !== void 0 && tooltip.hoverable) {
      setShowTooltip(true);

      if (typeof onMouseEnter === `function`) {
        onMouseEnter();
      }

      if (typeof onTooltipToogle === `function`) {
        onTooltipToogle(true);
      }
    }
  };

  const onMouseLeave = () => {
    if (active && tooltip !== null && tooltip !== void 0 && tooltip.hoverable) {
      setShowTooltip(false);

      if (typeof onTooltipToogle === `function`) {
        onTooltipToogle(false);
      }
    }
  };

  (0, _react.useEffect)(() => {
    setShowTooltip(tooltip === null || tooltip === void 0 ? void 0 : tooltip.show);
  }, [tooltip === null || tooltip === void 0 ? void 0 : tooltip.show]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("button", {
    "data-gatsby-preview-indicator": "button",
    "data-gatsby-preview-indicator-active-button": `${active}`,
    "data-gatsby-preview-indicator-hoverable": active && hoverable && !highlighted ? `true` : `false`,
    "data-gatsby-preview-indicator-highlighted-button": `${highlighted}`,
    "data-testid": `${testId}-button`,
    style: {
      marginTop: marginTop
    },
    onMouseEnter: onButtonMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("div", null, iconSvg, showSpinner && /*#__PURE__*/_react.default.createElement("div", {
    "data-gatsby-preview-indicator": "spinner"
  }, _icons.spinnerIcon)), tooltip && /*#__PURE__*/_react.default.createElement(_tooltips.IndicatorButtonTooltip, (0, _extends2.default)({}, tooltip, {
    testId: testId,
    show: showTooltip
  }))));
};

var _default = IndicatorButton;
exports.default = _default;